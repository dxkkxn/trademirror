version: "3"
services:
  # ------- DATABASE ----------
  redis:
    image: redis
    container_name: redis-container
    volumes:
        - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    # networks:
    #   - trade-mirror-network

  rediscommander:
    image: rediscommander/redis-commander
    container_name: redis-commander-container
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    # networks:
    #   - trade-mirror-network
  # rediscommander:
  #   image: ${REDIS_COMMANDER_IMAGE}
  #   container_name: ${REDIS_COMMANDER_CONTAINER}
  #   restart: always
  # # -------------------------------
  # # ---------BACKEND --------------
  # rest-api-service:
  #   image: ${RESTAPI_IMAGE}
  #   container_name: ${RESTAPI_CONTAINER}
  #   build:
  #     context: ${PWD}
  #     dockerfile: ./rest-api/Dockerfile
  #   env_file:
  #     - ./rest-api/.env
  #   depends_on:
  #     - redis
  #   ports:
  #     - ${RESTAPI_PORT}:8000
  #   networks:
  #     - trade-mirror-network
  # # -------------------------------
  # # ---------- FRONTEND -----------
  # frontend:
  #   image: ${FRONTEND_IMAGE}
  #   container_name: ${FRONTEND_CONTAINER}
  #   build:
  #     context: ${PWD}
  #     dockerfile: ./frontend/Dockerfile.dev
  #   depends_on:
  #     - rest-api-service
  #   ports:
  #     - ${FRONTEND_PORT}:4500
  #   networks:
  #     - trade-mirror-network
  # #---------------------------------
  # # ----------NGINX----------------
  # nginx:
  #   image: nginx:latest
  #   container_name: "nginx-container"
  #   ports:
  #     - "4321:4321"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - frontend
  #     - rest-api-service
  #   networks:
  #     - trade-mirror-network
  # # --------------------------------
  # # ------------KAFKA---------------
  # zookeeper:
  #   image: ${ZOOKEEPER_IMAGE}
  #   container_name: ${ZOOKEEPER_CONTAINER}
  #   ports:
  #     - ${ZOOKEEPER_PORT}:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - trade-mirror-network
  # kafka:
  #   # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
  #   # An important note about accessing Kafka from clients on other machines:
  #   # -----------------------------------------------------------------------
  #   #
  #   # The config used here exposes port 9092 for _external_ connections to the broker
  #   # i.e. those from _outside_ the docker network. This could be from the host machine
  #   # running docker, or maybe further afield if you've got a more complicated setup.
  #   # If the latter is true, you will need to change the value 'localhost' in
  #   # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
  #   # remote clients
  #   #
  #   # For connections _internal_ to the docker network, such as from other services
  #   # and components, use kafka:29092.
  #   #
  #   # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
  #   # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
  #   #
  #   image: ${KAFKA_IMAGE}
  #   container_name: ${KAFKA_CONTAINER}
  #   ports:
  #     - ${KAFKA_PORT}:9092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer # Specify the serializer for values
  #     KAFKA_PRODUCER_VALUE_SERIALIZER_CLASS: io.confluent.kafka.serializers.KafkaJsonSerializer # Use the Kafka JSON serializer
  #   depends_on:
  #     - zookeeper
  #   volumes:
  #     - ./kafka:/home/appuser
  #   command: sh -c "((sleep 15 && /bin/bash -c '/home/appuser/create_kafka_topic.sh' )&) && /etc/confluent/docker/run "
  #   healthcheck:
  #     test: /home/appuser/check_topic.sh
  #     interval: 10s
  #     retries: 5
  #     timeout: 5s
  #   networks:
  #     - trade-mirror-network
  # ftd:
  #   image: ${FTD_IMAGE}
  #   container_name: ${FTD_CONTAINER}
  #   build:
  #     context: ${PWD}
  #     dockerfile: ./frequent-traders-detector/ftd/Dockerfile
  #   env_file:
  #     - ./frequent-traders-detector/ftd/.env.test
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - trade-mirror-network
  # database_driver:
  #   image: ${DATABASE_DRIVER_IMAGE}
  #   container_name: ${DATABASE_DRIVER_CONTAINER}
  #   build:
  #     context: ${PWD}
  #     dockerfile: ./frequent-traders-detector/database-driver/Dockerfile
  #   env_file:
  #     - ./frequent-traders-detector/database-driver/.env.test
  #   depends_on:
  #     - ftd
  #   networks:
  #     - trade-mirror-network

  # transaction-fetcher:
  #   image: transaction-fetcher
  #   container_name: tf-container
  #   build:
  #     context: backend/transaction-fetcher
  #     dockerfile: ../python.Dockerfile
  #   environment:
  #     REDIS_HOST: "redis"
  #     REDIS_PORT: "6379"
  #   depends_on:
  #     - redis
  #   networks:
  #     - trade-mirror-network
  # transaction-fetcher:
  #   image: "transaction_fetcher_image"
  #   container_name: "transaction-fetcher-container"
  #   build:
  #     context: ${PWD}
  #     dockerfile: ./transaction-fetcher/Dockerfile

# networks:
#   trade-mirror-network:
#     driver: bridge
