version: "3"
services:
  # ------- DATABASE ----------
  redis:
    image: redis
    container_name: redis-container
    volumes:
        - ./backend/redis.conf:/redis.conf
        - ./backend/setup_redis.sh:/setup_redis.sh
    command: /setup_redis.sh
    ports:
      - 6379:6379
    restart: always

  rediscommander:
    image: rediscommander/redis-commander
    container_name: redis-commander-container
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081

  rest-api-service:
    image: restapi_image
    container_name: restapi-service
    build:
      dockerfile: ./rest-api/Dockerfile
      context: ${PWD}
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DATABASE: 0
    depends_on:
      - redis
    ports:
      - 8000:8000

  frontend:
    image: frontend_image
    container_name: frontend_container
    build:
      dockerfile: ./frontend/Dockerfile.dev
      context: ${PWD}
    depends_on:
      - rest-api-service
    ports:
      - 80:4500

  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - 4321:4321
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - rest-api-service

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    container_name: kafka_container
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer # Specify the serializer for values
      KAFKA_PRODUCER_VALUE_SERIALIZER_CLASS: io.confluent.kafka.serializers.KafkaJsonSerializer # Use the Kafka JSON serializer
    depends_on:
      - zookeeper
    volumes:
      - ./kafka:/home/appuser
    command: sh -c "((sleep 15 && /bin/bash -c '/home/appuser/create_kafka_topic.sh' )&) && /etc/confluent/docker/run "
    healthcheck:
      test: /home/appuser/check_topic.sh
      interval: 10s
      retries: 5
      timeout: 5s

  ftd:
    image: frequent-traders-detector
    container_name: ftd-container
    build:
      context: backend/ftd
      dockerfile: ../python.Dockerfile
    environment:
      BOOTSTRAP_SERVER: kafka:29092
      TOPIC_FREQUENT_TRADERS: frequent-traders
    depends_on:
      kafka:
        condition: service_healthy

  balance-fetcher:
    image: balance-fetcher
    container_name: bf-container
    build:
      context: backend/balance-fetcher
      dockerfile: ../python.Dockerfile
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BOOTSTRAP_SERVER: kafka:29092
      TOPIC_FREQUENT_TRADERS: frequent-traders
    depends_on:
      kafka:
        condition: service_healthy

  scoring:
    image: scoring
    container_name: scoring-container
    build:
      context: backend/scoring
      dockerfile: ../python.Dockerfile
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - redis

  transaction-fetcher:
    image: transaction-fetcher
    container_name: tf-container
    build:
      context: backend/transaction-fetcher
      dockerfile: ../python.Dockerfile
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BOOTSTRAP_SERVER: kafka:29092
      TOPIC_FREQUENT_TRADERS: frequent-traders
      TOPIC_TRANSACTIONS: transactions
    depends_on:
      kafka:
        condition: service_healthy

  copy-trading:
    image: copy-trading
    container_name: copy-trading-container
    build:
      context: backend/copy-trading
      dockerfile: ../python.Dockerfile
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BOOTSTRAP_SERVER: kafka:29092
      TOPIC_TRANSACTIONS: transactions
    depends_on:
      kafka:
        condition: service_healthy
